#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-regular-webapp2:server');
var http = require('http');

const diskLogic = require('../logic/disk');
const diskService = require('../services/disk');
const ethereumdLogic = require('../logic/ethereumd');
const constants = require('../utils/const');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Function to create default ethereum core config files if they do not already exist.
 */

async function createConfFilesAndRestartethereumd() {
  console.log('umbrel-ethereum.conf does not exist, creating config files with Umbrel default values');
  const config = await diskLogic.getJsonStore();

  // set torProxyForClearnet to false for existing installs
  if (constants.ethereum_INITIALIZE_WITH_CLEARNET_OVER_TOR) config.torProxyForClearnet = true;

  await diskLogic.applyCustomethereumConfig(config);

  const MAX_TRIES = 60;
  let tries = 0;

  while (tries < MAX_TRIES) {
    try {
      await ethereumdLogic.stop();
      break;
    } catch (error) {
      console.error(error);
      tries++;
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);

  // if umbrel-ethereum.conf does not exist, create default ethereum core config files and restart ethereumd.
  if (! await diskService.fileExists(constants.UMBREL_ethereum_CONF_FILEPATH)) {
    createConfFilesAndRestartethereumd();
  }
}
